<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>GAMES101课程笔记（二）——Rasterization</title>
      <link href="/2023/10/01/games101-ke-cheng-bi-ji-er-rasterization/"/>
      <url>/2023/10/01/games101-ke-cheng-bi-ji-er-rasterization/</url>
      
        <content type="html"><![CDATA[<h1 id="GAMES101课程笔记（二）——Rasterization"><a href="#GAMES101课程笔记（二）——Rasterization" class="headerlink" title="GAMES101课程笔记（二）——Rasterization"></a>GAMES101课程笔记（二）——Rasterization</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>书接上文，经过了MVP矩阵的变换后，我们已经将三维世界的物体变换到了$[-1,1]^3$的标准立方体中，那接下来我们该如何将它绘制到我们的屏幕上呢？本文的主题光栅化（Rasterization）就是解决这一问题的钥匙。</p><p>光栅化的背后是一系列复杂的数学和计算过程，它们将三维世界转化为我们计算机屏幕上的二维图像。这个过程包括了顶点转换、三角形裁剪、光栅化和像素渲染等关键步骤，每一个步骤都需要高效地执行，以实现流畅的图形渲染和动画展示。</p><p>前文指路：</p><p><a href="/2023/09/14/games101-ke-cheng-bi-ji-yi-transformation/">GAMES101课程笔记（一）——Transformation</a></p><h2 id="Pixel——像素"><a href="#Pixel——像素" class="headerlink" title="Pixel——像素"></a>Pixel——像素</h2><p>为了解计算机如何显示图像，我们要先从屏幕开始说起，更具体一点，是从<strong>像素</strong>开始说起。</p><p>在屏幕上，像素是组成图像的最基本单位，每个像素有红绿蓝三个颜色组成，它们像点阵一样分布在屏幕上。</p><p><img src="1.png" width="60%"></p><p>借由三原色的特性，每一个像素都可以展现出任何颜色，从而能够显示出任意图像。</p><p>根据像素的排布特点，我们能联想到使用数组来对当前显示图像进行表达，数组中的每个元素包含有红（R）绿（G）蓝（B）三个颜色。</p><p>我们使用坐标来标记屏幕上的每一个像素，这就是<strong>屏幕空间</strong>，例如下图中的蓝色像素坐标为$(2,1)$。</p><p><img src="2.png" alt=""></p><p>但实际中，<strong>像素并不是真正的一个点</strong>，它是有大小的，而我们在使用刚才像素坐标时，实际上描述的是该像素左下角点的位置。</p><p>该像素的中心坐标实际上是$(2.5,1.5)$，占据的空间是$(2,1)$到$(3,2)$的这部分区域。</p><p>本文的主题光栅化（Rasterization），就是要讲如何用像素来进行图像的绘制。</p><h2 id="Rasterization——光栅化"><a href="#Rasterization——光栅化" class="headerlink" title="Rasterization——光栅化"></a>Rasterization——光栅化</h2><p>了解了屏幕的构成，我们接下来思考，如何将$[-1,1]^3$中的点转换到$[0,width]×[0,height]$的平面坐标上。</p><p><img src="3.png" alt=""></p><p>这里我们先不考虑空间中的$z$坐标，只考虑变换$x$与$y$坐标，那其实就是一个平移加缩放的变换，变换矩阵为：</p><script type="math/tex; mode=display">M_{viewport}=\begin{pmatrix}\frac{width}{2} & 0 & 0 & \frac{width}{2}\\0 & \frac{height}{2} & 0 & \frac{height}{2}\\0 & 0 & 1 & 0\\0 & 0 & 0 & 1\end{pmatrix}</script><p>需要注意的是，我们的变换只是将点转换到平面坐标上，而没有将其转换到具体的像素点上。</p><p>（理由正如刚才提到的，像素并不是真正的点，它是有大小的）</p><p>接下来我们就要探讨，如何进行这一步的转换。</p><h3 id="神奇的三角形"><a href="#神奇的三角形" class="headerlink" title="神奇的三角形"></a>神奇的三角形</h3><p>在图形学中，我们经常使用三角形来组成更复杂的多边形，例如下图中的圆球和海豚。</p><p><img src="4.png" width="60%"></p><p>这是因为三角形有很多优秀的性质，例如：</p><ul><li>本身是最基础的多边形，能构成其它任何多边形</li><li>三角形一定是一个平面图形（三点确定一个平面）</li><li>容易判断点在三角形内外</li><li>在三角形内容易进行插值运算（后续会详细提及）</li></ul><p>所以说，只要我们解决了如何绘制一个三角形的问题，就能解决绘制任何图形的问题。</p><p>举一个具体的例子，现在有一个红色三角形，知道它的三个顶点坐标，我们该如何使用像素将其绘制出来呢？</p><p><img src="5.png" width="60%"></p><h3 id="Sampling——采样"><a href="#Sampling——采样" class="headerlink" title="Sampling——采样"></a>Sampling——采样</h3><p>采样，就是将连续值转化为离散值的过程。在我们的问题中，像素就是离散值，因此可以用采样的方法来解决。</p><p>（想深入了解的话可以简单学习一下信号与系统）</p><p>具体而言，是使用像素的中心坐标来对屏幕上的图形进行采样。最简单的做法就是判断像素中心是否在三角形内，如果在那就显示，否则就不显示，如下图所示：</p><p><img src="6.png" alt=""></p><p>对于平面上的所有点，应满足函数：</p><script type="math/tex; mode=display">inside(t,x,y)=\begin{cases}1 & (x,y)\ in\ triangle\ t\\0 & otherwise\end{cases}</script><p>我们使用离散的像素来对该函数进行采样，制这个三角形的代码就可以写为：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">for (int x=0; x&lt;xmax; ++x)    for (int y=0; x&lt;ymax; ++y)        image[x][y]=inside(t, x+0.5, y+0.5)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>思路就是偏离所有的像素，逐个判断是否在三角形内。</p><p>现在问题就落在：该如何判断这个点是否在三角形内部呢？</p><p><img src="7.png" width="40%"></p><p>一个简单的方法是使用叉积来进行判断，假设我们像上图已知三角形$P_0P_1P_2$（顶点已按逆时针排序）和一点$Q$。</p><p>我们可以分别计算$\vec{P_0P_1}×\vec{P_0Q}$，$\vec{P_1P_2}×\vec{P_1Q}$，$\vec{P_2P_0}×\vec{P_2Q}$的结果，假如三者的结果都指向屏幕外，那就可以判断Q点在三角形内，反之则在三角形外。</p><p>在本例中，由于$\vec{P_2P_0}×\vec{P_2Q}$的结果向量指向屏幕内，所以可以得到$Q$在三角形外的结论。</p><p>当然，除了在三角形外和在三角形内，还有可能点刚好在三角形边上，就像下图中的点，我们究竟该说是在三角形1上，还是在三角形2上，或者说干脆不在任何一个上？</p><p><img src="8.png" width="40%"></p><p>答案是都可以，虽然在OpenGL等库中对此很严格的规定，但在我们学习的过程中并不重要，只要我们使用一套自洽的规则来进行判断，或者干脆不特殊处理就行。</p><p>比如我们就可以规定：在边上就在三角形内。那么这个点就既在三角形1内，也在三角形2内。</p><p>总而言之，不必过于纠结这种情况。</p><h3 id="Bounding-Box——包围盒"><a href="#Bounding-Box——包围盒" class="headerlink" title="Bounding Box——包围盒"></a>Bounding Box——包围盒</h3><p>在刚才的代码中，我们遍历了屏幕上所有的像素，但事实上，很多三角形只占据了屏幕中的一小部分，遍历所有像素无疑会造成额外的开销。</p><p>所以我们就可以只判断三角形所占据的那一块区域中的像素，这样就可以提高效率，这种将目标图形包含在内的图形，我们就称之为<strong>包围盒</strong>。</p><p>下图中的蓝色像素就是一个典型的包围盒，我们做采样时只需要对这些像素进行处理就可以了。</p><p><img src="9.png" width="40%"></p><p>需要注意的是包围盒并不一定要是矩形的，只是这里举的例子是这样的，矩形也比较便于处理。</p><p>这种边平行于坐标轴的包围盒非常常用，被简称为AABB（Axis-Aligned Bounding Box，轴对齐）包围盒。</p><p>包围盒的获得非常容易，假设三角形的顶点坐标为$P_0(x_0,y_0)$，$P_1(x_1,y_1)$，$P_2(x_2,y_2)$，那么其包围盒就是以点$(min\begin{Bmatrix}x_0,x_1,x_2\end{Bmatrix},min\begin{Bmatrix}y_0,y_1,y_2\end{Bmatrix})$为左下角，点$(max\begin{Bmatrix}x_0,x_1,x_2\end{Bmatrix},\begin{Bmatrix}y_0,y_1,y_2\end{Bmatrix})$为右上角的矩形。</p><h2 id="Antialiasing——反走样"><a href="#Antialiasing——反走样" class="headerlink" title="Antialiasing——反走样"></a>Antialiasing——反走样</h2><h3 id="Artifacts——瑕疵"><a href="#Artifacts——瑕疵" class="headerlink" title="Artifacts——瑕疵"></a>Artifacts——瑕疵</h3><p>很多时候，屏幕最终呈现出的画面会出现一些错误，例如锯齿、噪点等问题的出现，这些错误在图形学上我们都可以统称为Artifacts。</p><p>（闫老师不是很喜欢说瑕疵，而是直接说英文Artifacts，我个人也觉得直接说英文比较顺口，其实这个单词在图形学里还挺常见的，已经是一个梗的程度了）</p><p>这里我们介绍一些因采样引起的问题（Sampling Artifacts）。</p><h4 id="Jaggies——锯齿"><a href="#Jaggies——锯齿" class="headerlink" title="Jaggies——锯齿"></a>Jaggies——锯齿</h4><p>像素毕竟是离散的，因此在绘制图像时难免会出现差异，其中最普遍的一个问题就是锯齿。</p><p><img src="10.png" width="60%"></p><p>我们期望中的三角形应该像左图一样——拥有三条平滑的边，完美地符合数学上的定义，但在屏幕上可做不到。</p><p>真实的屏幕上的三角形像右图一样，其边缘为不规则的锯齿，如何解决锯齿也是图形学的一个经典课题。</p><p>该问题的根源原因在于<strong>采样频率不够高</strong>，即像素点不够多，理论上当有无限个像素点时就能形成完美的直线。</p><p>（我们平时说的高分辨率其实就是提高了采样频率，也就感觉锯齿减少了）</p><h4 id="Moire-pattern——摩尔纹"><a href="#Moire-pattern——摩尔纹" class="headerlink" title="Moire pattern——摩尔纹"></a>Moire pattern——摩尔纹</h4><p>摩尔纹是另外一个经典问题，有时我们拍摄条纹密集的物体，最终的成像却会变成奇怪的波纹条纹，就像下图展示的一样：</p><p><img src="11.png" width="60%"></p><p>这同样是因为采样频率低而产生的问题，当重复图案的周期频率超过采样频率时，图案就会出现一部分的缺失，当我们再现时便会出现这种问题。</p><p>闫老师给出了一个复现摩尔纹的办法，即将左图的奇数行奇数列删除，将其余部分重新拼合（也就是图片缩小为原来的1/4），再将其按原来的大小显示，就会变成右图这样的情况。</p><p>这个过程相当于将横向和纵向的采样频率各下降一半，此时其频率低于原始图案的重复频率，便出现了摩尔纹。</p><h4 id="Wagon-wheel-effect——车轮效应"><a href="#Wagon-wheel-effect——车轮效应" class="headerlink" title="Wagon wheel effect——车轮效应"></a>Wagon wheel effect——车轮效应</h4><p>在下图中，我们顺时针旋转一个轮盘，但奇怪的是，轮盘上的一些部分看上去像是在逆时针旋转。</p><p><img src="12.gif" alt=""></p><p>这种现象被称为车轮效应，与上述两者不同，这是时间维度上的采样频率不够而导致的。</p><h3 id="了解频率"><a href="#了解频率" class="headerlink" title="了解频率"></a>了解频率</h3><p>到这里我们已经提到了很多次频率这个词了，现在我们需要深入介绍一下。</p><h4 id="采样频率的影响"><a href="#采样频率的影响" class="headerlink" title="采样频率的影响"></a>采样频率的影响</h4><p>这里分析一般情况下，采样频率低为什么会造成走样。</p><p>以下图为例，假设我们要对蓝色的正弦波进行采样，但采样频率偏低，采样到的几个点已经标注在了图上：</p><p><img src="16.png" alt=""></p><p>但如果我们再引入一个函数，即图中的黑色正弦波，用相同的频率进行采样，那我们的采样结果将和之前的一致。</p><p>也就是说，用相同的办法对两个频率差距很大的函数进行采样，居然得到了一样的结果，这便是走样出现的原因。</p><h4 id="Fourier-Transform——傅里叶变换"><a href="#Fourier-Transform——傅里叶变换" class="headerlink" title="Fourier Transform——傅里叶变换"></a>Fourier Transform——傅里叶变换</h4><p>在微积分当中我们应该学过傅里叶级数，即任何周期函数都可以用正弦函数和余弦函数构成的无穷级数来表示。</p><p>其一般表达式为：</p><script type="math/tex; mode=display">f(x) = \sum_{n=0}^{\infty} \left( a_n \cos\left(2\pi fnx\right) + b_n \sin\left(2\pi fnx\right) \right)</script><p>通常我们都是在有限范围内处理函数，所以我们可以近似地认为可以用傅里叶级数来表达任何函数。</p><p> 而我们观察傅里叶级数可以知道，它实际上是无数个不同频率的正弦波和余弦波组成的，那么我们就可以将这个函数拆分为不同的频率段，为实现这一过程，我们使用的变换为傅里叶变换。</p><p>傅里叶变换的公式为：</p><script type="math/tex; mode=display">F(\omega) = \int_{-\infty}^{\infty} f(t) \cdot e^{-2\pi i\omega t} \, dt</script><p>其逆变换为：</p><script type="math/tex; mode=display">f(t) = \int_{-\infty}^{\infty} F(\omega) \cdot e^{2\pi i\omega t} \, d\omega</script><p>这样我们就可以把一个函数在其原始域（通常是时域）和频域之间进行相互转换了。</p><p>下图展示了对图片应用傅里叶变换后的结果：</p><p><img src="17.png" width="60%"></p><p>右图的中心区域代表低频信号，越靠外表示的信号频率越高，不难看出这张图片的大多数信息都集中在低频区。</p><p>（事实上很多图片的信息都是集中在低频区）</p><p>另外在频率图中还有两条相互垂直的白线，这是因为我们在应用傅里叶变换时，都希望原函数是周期函数，于是我们会将原图复制很多份，像铺地板一样铺在一起，这样会导致在每张图的边界处产生信号的跳变，从而形成这两条白线。</p><p>我们主要关注图片本身的信息，因此可以忽略这两条白线。</p><p>所以说，傅里叶变换让我们能从频率上“看”到这张图。</p><h4 id="Filtering——滤波"><a href="#Filtering——滤波" class="headerlink" title="Filtering——滤波"></a>Filtering——滤波</h4><p>滤波是信号处理领域中的一项重要任务，它指的是通过应用一种称为滤波器的函数或操作，对输入信号进行变换或修改，这里先介绍一些简单的滤波方式。</p><p>首先是<strong>高通滤波</strong>，我们会将低频信号全部过滤掉，它就会产生这样的效果：</p><p><img src="18.png" width="60%"></p><p>可以看出，图片中剩下的信息基本上都是”边界“，这并不难理解，因为边界两边往往会发生剧烈的变化，所以会包含很更多的高频信号。</p><p>相反地，还有<strong>低通滤波</strong>，即过滤掉高频信号，它的效果是这样的：</p><p><img src="19.png" width="60%"></p><p>图中只剩下了模糊的色块，原因与高通滤波是一致的，只是这里我们删除了边界。</p><p>或者我们也可以只取中间的一部分信号：</p><p><img src="20.png" width="60%"></p><p>事实上，滤波的内容并不仅仅只是简单的删除一部分信号，针对不同的问题，我们会对原始信号进行不同的滤波方式（例如下文就要介绍的卷积）。</p><p>我们可以看出，从频域的角度来分析图片，无疑是一个全新且实用的角度。</p><h4 id="Convolution——卷积"><a href="#Convolution——卷积" class="headerlink" title="Convolution——卷积"></a>Convolution——卷积</h4><p>卷积是图像处理中非常常见的一种操作，为了进行卷积，我们首先需要定义一个卷积核。</p><p>在下图中，我们定义的卷积核就是$[1/4,1/2,1/4]$，Signal是我们的原始信号。</p><p>进行卷积操作，就是将卷积核与原始信号对齐，然后类似向量点积一样进行成绩求和得到结果：</p><p><img src="21.png" width="60%"></p><p>计算完后将卷积核向右移动，对齐下一个信号，再次进行计算：</p><p><img src="22.png" width="60%"></p><p>直到所有的信号都计算完毕，卷积操作也就结束了。</p><p>如果Signal是我们的原始图片，那么从Signal到Result的过程就是一个滤波，Filter被称为滤波器。</p><p>卷积操作拥有两个对偶的特性：</p><ol><li>在空间域上进行卷积操作，相当于在频域上进行乘积操作。</li><li>在空间域上进行乘积操作，相当于在频域上进行卷积操作。</li></ol><p>该定理在这里我们不予证明，借由这个性质，我们进行卷积滤波时就可以有两种做法。</p><p><strong>做法一</strong>：</p><ul><li>直接在空间域上计算卷积</li></ul><p><strong>做法二</strong>：</p><ul><li>将图片和卷积核从空间域转换为频域（使用傅里叶变换）</li><li>在频域上进行乘法运算</li><li>将频域转换为空间域（使用逆傅里叶变换） </li></ul><p>下图展示了上述两种做法的过程：</p><p><img src="23.png" width="60%"></p><p>图中的这种滤波器被叫做方框滤波器（Box Filter），它是一个$n×n$的矩阵，其所有元素都是$\frac{1}{n×n}$。</p><p>其本质是计算了区域内所有像素的平均值，它在空间域与频域上的情况如下所示：</p><p><img src="24.png" width="50%"></p><p>如果我们加大方框滤波器的尺寸，那它对应的频率信号会变低：</p><p><img src="25.png" width="50%"></p><p>反映在实际效果上，就是我们使用的方框滤波器越大，那么结果图就会越模糊。</p><h4 id="从频域的角度理解采样"><a href="#从频域的角度理解采样" class="headerlink" title="从频域的角度理解采样"></a>从频域的角度理解采样</h4><p>现在我们可以从频域的角度来理解采样了。</p><p>回想我们之前提到的采样，实际上是使用了一个冲激函数与原函数相乘。下图中，图（a）是原函数，图（c）是冲激函数，进行采样得到的就是图（e）中的函数。</p><p><img src="26.png" width="60%"></p><p>刚才我们说过，在空间域上进行乘积操作，相当于在频域上进行卷积操作。因此从频域的角度来看，我们是做了一个函数卷积，如图（b）（d）（f）所示。</p><p>图（d）仍然是冲激函数，因为冲激函数在频域上依然是冲激函数，但周期不同。</p><p>所以<strong>采样的本质，是在重复原始信号的频谱</strong>。采样的频率，影响了频谱中重复信号的距离。</p><p>也就是说，如果我们的采样频率过低，会导致重复信号产生重叠，从而导致走样的出现。</p><p><img src="27.png" width="60%"></p><p>通过提高采样频率，能够从根本上解决走样的问题，但缺点是需要更大的开销，以及更多的像素。</p><h3 id="Blurring（Pre-Filtering）——模糊"><a href="#Blurring（Pre-Filtering）——模糊" class="headerlink" title="Blurring（Pre-Filtering）——模糊"></a>Blurring（Pre-Filtering）——模糊</h3><p>解决采样的Artifacts，除了提高采样频率，我们还可以在采样前对原始图案进行模糊处理，如下图：</p><p><img src="13.png" width="60%"></p><p>这么做能让边界处的像素使用中间颜色值，从而降低视觉上的锯齿感，下面是应用模糊前后的对比图：</p><p><img src="14.png" width="60%"></p><p>从频域的角度上说，将图像模糊之后，高频信号被滤除，于是采样后的信号便不会再重叠。</p><p><img src="28.png" width="60%"></p><p>这也解释了为什么模糊操作一定要在采样前进行，而不能颠倒两者的顺序。</p><p>具体的做法就是对图片进行一个卷积操作，然后采样即可。</p><h3 id="Supersampling——超级采样"><a href="#Supersampling——超级采样" class="headerlink" title="Supersampling——超级采样"></a>Supersampling——超级采样</h3><p>对于像素点的着色，我们可以更加直观地来看，下图展示了几种状态的像素着色，它们的区别在于本身有多少比例在三角形外和三角形内。</p><p><img src="29.png" width="60%"></p><p>可以发现，在三角形内的部分比例越高，像素着色越白，反之则越黑。</p><p>但其实这个覆盖比例是很难计算的，所以在实际应用中，我们使用另一种方法来近似。</p><p>我们假设每一个像素是可以再分的，例如我们将一个像素看作16个更小的像素：</p><p><img src="30.png" alt=""></p><p>分别判断16个点是否在三角形内，然后根据结果来近似得出三角形的覆盖率。</p><p>举一个具体的例子，我们用原始采样法来绘制三角形可能是这样的：</p><p><img src="31.png" width="60%"></p><p>使用超级采样的话，我们先将每个像素看作4个小像素，那么经过采样判断，结果应是：</p><p><img src="32.png" width="60%"></p><p>但我们知道，实际上每个像素只能着一色，所以对于每个实际像素，我们计算在三角形内的小像素比例。</p><p><img src="33.png" width="60%"></p><p>例如上方这个角处的像素，它有三个小像素在三角形内，所以该像素的取值就应是0.75，按此方式计算完所有像素，就完成了该三角形的绘制，并达到抗锯齿的效果。</p><h2 id="遮挡难题"><a href="#遮挡难题" class="headerlink" title="遮挡难题"></a>遮挡难题</h2><p>现在我们掌握了绘制平面图形的技术，但我们最初的问题可是绘制三维物体，三维物体转换到平面上时会出现<strong>遮挡</strong>问题，也就是物体互相覆盖的情形，为了保证正确成像，我们需要认真考虑这一问题。</p><h3 id="Painter’s-Algorithm——画家算法"><a href="#Painter’s-Algorithm——画家算法" class="headerlink" title="Painter’s Algorithm——画家算法"></a>Painter’s Algorithm——画家算法</h3><p>一个最简单的想法就是由远及近地进行绘制，这样近的物体就会覆盖远的物体，从而自然地处理遮挡问题，以画一个立方体为例：</p><p><img src="34.png" width="60%"></p><p>我们先绘制其后面，然后绘制左、右、下面，最后绘制上、前面，这样就可以准确表达立方体各个面间的遮挡关系，这一算法就是画家算法。</p><p>从程序的角度思考，我们需要对每个三角的深度来进行排序，假设有$n$个三角形，时间复杂度为$O(n\log(n))$。</p><p><img src="35.png" width="40%"></p><p>但画家算法的适用场景仅限于简单遮挡，如果面临上图中这种情况，那不管我们怎么调整每个三角的绘制顺序，都无法正确表达。</p><h3 id="Z-Buffer——深度缓存"><a href="#Z-Buffer——深度缓存" class="headerlink" title="Z-Buffer——深度缓存"></a>Z-Buffer——深度缓存</h3><p><strong>首先提醒，本文假设相机放在原点，向$z$轴正方向看去，所以默认$z$值为正。</strong></p><p>图形学中我们更常用的一种算法是深度缓存，相比于画家算法，它适用于更多的场景。</p><p>深度缓存的基本思想就是<strong>为每个像素记录最小的z值</strong>（也就是最小的深度值、最浅的距离），然后以此为依据来进行绘制。</p><p>为了实现这一过程，我们使用<strong>DepthBuffer</strong>和<strong>FrameBuffer</strong>来存储信息，其中DepthBuffer用以保存深度信息，Framebuffer用以保存色彩信息。</p><p>这里的DepthBuffer其实就是我们平时所说的深度图，它与我们的绘制结果是同时生成的，我们可以用灰度的形式绘制出来：</p><p><img src="36.png" width="60%"></p><p>我们用伪代码来解释Z-Buffer的过程：</p><pre class="line-numbers language-none"><code class="language-none">for (each triangle T)                   // go through each trianglefor (each sample (x, y, z) in T)if (z&lt;zbuffer[x,y])             // closest sample so farframebuffer[x,y] = rgb;     // update colorzbuffer[x,y] = z;           // update depthelse... // do nothing<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简单而言就是遍历所有的三角，然后依据$z$值更新对应的DepthBuffer（代码中的zbuffer）和FrameBuffer。</p><p>下图是一个更加直观的示例，其中R代表无限大：</p><p><img src="37.png" width="60%"></p><p>在第一步中，由于红色三角形的深度（5）小于初始值（无限大），所以红色三角形对应的像素被全部更新为5。</p><p>而在第二步中，重点关注蓝色三角形中，和红色三角形重合的地方，某些深度小于5，某些则大于5，对那些小于5的深度进行更新，从而获得了正确的深度缓存。</p><p>假设有$n$个三角形，每个三角形覆盖的像素都是一个可估计的常数值，则时间复杂度为$O(n)$。</p><p>之所以节省了这么多，是因为Z-Buffer解决问题的方式是<strong>最小值</strong>，而非排序。</p><p>不难发现，在Z-Buffer算法中，遍历三角的顺序并不重要，无论顺序如何，最终的结果都是一致的。</p><p>OK，第二篇光栅化笔记，就此完结！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机图形学 </tag>
            
            <tag> GANES101 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GAMES101课程笔记（一）——Transformation</title>
      <link href="/2023/09/14/games101-ke-cheng-bi-ji-yi-transformation/"/>
      <url>/2023/09/14/games101-ke-cheng-bi-ji-yi-transformation/</url>
      
        <content type="html"><![CDATA[<h1 id="GAMES101课程笔记（一）——Transformation"><a href="#GAMES101课程笔记（一）——Transformation" class="headerlink" title="GAMES101课程笔记（一）——Transformation"></a>GAMES101课程笔记（一）——Transformation</h1><p>本文基于闫老师的GAMES101课程，如果想要更好的阅读体验，建议搭配原课程一起食用。</p><div style="position: relative;width: 80%;height: 0;padding-bottom: 50%;"><iframe src="//player.bilibili.com/player.html?aid=90798049&amp;bvid=BV1X7411F744&amp;cid=155049937&amp;p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%"> </iframe></div><h2 id="写在本系列之前"><a href="#写在本系列之前" class="headerlink" title="写在本系列之前"></a>写在本系列之前</h2><p>笔者是一位刚刚入学的研究生，浑浑噩噩了一整个大四以后终于决定干点正事。由于自己对计算机图形学很感兴趣，将来也希望能从事游戏相关的行业，所以就慕名来学习GAMES101的课程，并开启此系列作为自己的学习记录，如果文中有任何不正确的地方，还请各位大佬指正。</p><p>本系列略去了很大一部分的基础数学知识，尤其是线性代数部分，如果在阅读本系列时发现公式部分难以理解，建议自行补充对应的数学知识。</p><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>本文的主题是变换（Transformation），从简单的平移、旋转和缩放，到复杂的仿射变换和透视变换，变换为我们提供了控制和呈现图像的有力工具。</p><p>变换不仅仅是计算机图形学的核心，它还渗透到各种领域，如视频游戏、动画制作、虚拟现实、计算机辅助设计和医学成像等。</p><p><img src="25.png" width="60%"></p><p>在图形学中，我们使用矩阵来表达变换，接下来的内容也据此展开。</p><h2 id="2D-Transformation"><a href="#2D-Transformation" class="headerlink" title="2D Transformation"></a>2D Transformation</h2><h3 id="Linear-Transforms——线性变换"><a href="#Linear-Transforms——线性变换" class="headerlink" title="Linear Transforms——线性变换"></a>Linear Transforms——线性变换</h3><p>在图像的变换中，如果变换前后的坐标满足如下关系：</p><script type="math/tex; mode=display">x'=ax+by \\y'=cx+dy</script><p>我们就说这是一个线性变换，依据矩阵的知识，我们可以将上述变换写为矩阵形式：</p><script type="math/tex; mode=display">\begin{bmatrix}x'\\y'\end{bmatrix}=\begin{bmatrix}a & b\\c & d\end{bmatrix}\begin{bmatrix}x\\y\end{bmatrix}</script><p>其中矩阵<script type="math/tex">\begin{bmatrix}a & b\\c & d\end{bmatrix}</script>就称为该变换的变换矩阵。</p><p>接下来我们先介绍几种基础的线性变换。</p><h4 id="Scale——缩放变换"><a href="#Scale——缩放变换" class="headerlink" title="Scale——缩放变换"></a>Scale——缩放变换</h4><p>该变换中，图片仅在x轴和y轴上成比例缩放，如下图所示：</p><p><img src="1.png" width="60%"></p><p>缩放变换的矩阵表达形式为：</p><script type="math/tex; mode=display">\begin{bmatrix}x'\\y'\end{bmatrix}=\begin{bmatrix}s_x & 0\\0 & s_y\end{bmatrix}\begin{bmatrix}x\\y\end{bmatrix}</script><h4 id="Reflection——反射变换"><a href="#Reflection——反射变换" class="headerlink" title="Reflection——反射变换"></a>Reflection——反射变换</h4><p>在缩放变换的基础之上，如果我们将$s_x$（$s_y$同理）取为负值，则可以实现将图像翻转，例如如果我们做如下变换：</p><script type="math/tex; mode=display">\begin{bmatrix}x'\\y'\end{bmatrix}=\begin{bmatrix}-1 & 0\\0 & 1\end{bmatrix}\begin{bmatrix}x\\y\end{bmatrix}</script><p> 则变换的效果就会变成这样：</p><p><img src="2.png" width="60%"></p><h4 id="Shear——错切变换"><a href="#Shear——错切变换" class="headerlink" title="Shear——错切变换"></a>Shear——错切变换</h4><p>错切变换比较抽象，在该变换中，我们需要先指定一个方向。</p><p>假如我们指定$x$轴方向，则所有点的坐标变换都满足这样的条件：仅有$x$方向上的坐标发生改变，改变后的值为其原始各方向坐标的线性组合。</p><p>这么解释非常抽象，我们从课程中的具体例子来进行解释：</p><p><img src="3.png" width="60%"></p><p>在图示变换中，这个正方形在x轴方向上进行了错切变换。不难发现，变换前后所有的点，其$y$轴坐标都没有发生变化，因此我们只需关注$x$轴的坐标，依据错切变换的定义，它应满足</p><script type="math/tex; mode=display">x'=mx+ny</script><p>原始正方形的左上角顶点坐标为$(0,1)$，变换后其坐标为$(a,1)$；右上角顶点的原始坐标为$(1,1)$，变换后为$(a+1,1)$。</p><p>代入上述方程，解得$m=1,n=a$</p><p>从而得到该变换的变换矩阵为：</p><script type="math/tex; mode=display">\begin{bmatrix}x'\\y'\end{bmatrix}=\begin{bmatrix}-1 & a\\0 & 1\end{bmatrix}\begin{bmatrix}x\\y\end{bmatrix}</script><script type="math/tex; mode=display"></script><h4 id="Rotation——旋转变换"><a href="#Rotation——旋转变换" class="headerlink" title="Rotation——旋转变换"></a>Rotation——旋转变换</h4><p>注意，我们这里说的旋转变换是指图像绕<strong>原点</strong>进行旋转，将图像沿逆时针旋转$\theta$的变换如下所示：</p><p><img src="4.png" width="60%"></p><p>不难推导出该变换的变换矩阵为：</p><script type="math/tex; mode=display">\begin{bmatrix}x'\\y'\end{bmatrix}=\begin{bmatrix}cos\theta & -sin\theta\\sin\theta & cos\theta\end{bmatrix}\begin{bmatrix}x\\y\end{bmatrix}</script><p>（使用高中数学知识就可以进行推导，此处不再赘述）</p><h3 id="Homogeneous-Coordinates——齐次坐标"><a href="#Homogeneous-Coordinates——齐次坐标" class="headerlink" title="Homogeneous Coordinates——齐次坐标"></a>Homogeneous Coordinates——齐次坐标</h3><h4 id="什么是齐次坐标"><a href="#什么是齐次坐标" class="headerlink" title="什么是齐次坐标"></a>什么是齐次坐标</h4><p>我们思考这样一个问题：我们如何用矩阵表示平面上的平移变换？就像下图中的这种情况：</p><p><img src="5.png" width="60%"></p><p>我们可以很简单地写出这样一个形式：</p><script type="math/tex; mode=display">\begin{bmatrix}x'\\y'\end{bmatrix}=\begin{bmatrix}1 & 0\\0 & 1\end{bmatrix}\begin{bmatrix}x\\y\end{bmatrix}+\begin{bmatrix}t_x\\t_y \end{bmatrix}</script><p>我们发现，这个矩阵并没法写作线性变换的形式，所以平移<strong>不是线性变换</strong>。</p><p>但作为一个简单且常用的变换，我们希望平移也能和线性变换的矩阵形式统一，于是我们在二维坐标上额外加上一维$w$，变为齐次坐标，形式为$(x,y,w)$。</p><p>其中$w$的取值决定了该坐标表示的是一个点还是一个向量，也就是说：</p><script type="math/tex; mode=display">2D\ point = (x,y,w)^T (w\not=0)\\2D\ vector = (x,y,0)^T</script><p>这也导致在齐次坐标下，<strong>点的表示并不唯一</strong>，对于任何一个坐标$(x,y,w)(w\not=0)$，它代表的其实就是点$(x/w,y/w,1)$。</p><p>（这其实解决了欧式空间中，无穷远点无法表示的问题，以后有空再说8）</p><p>于是，上述的平移变换我们就可以写成：</p><script type="math/tex; mode=display">\begin{bmatrix}x'\\y'\\1\end{bmatrix}=\begin{bmatrix}1 & 0 & t_x\\0 & 1 & t_y\\0 & 0  & 1\end{bmatrix}\begin{bmatrix}x\\y\\1\end{bmatrix}</script><p>这样，我们就可以将所有的线性变换，加上平移变换，统一地写为：</p><script type="math/tex; mode=display">\begin{bmatrix}x'\\y'\\1\end{bmatrix}=\begin{bmatrix}a & b & t_x\\c & d & t_y\\0 & 0  & 1\end{bmatrix}\begin{bmatrix}x\\y\\1\end{bmatrix}</script><h4 id="齐次坐标的运算"><a href="#齐次坐标的运算" class="headerlink" title="齐次坐标的运算"></a>齐次坐标的运算</h4><p>刚才提到过，齐次坐标通过第三维的数值来区分点和向量，这么设计使得原坐标下的运算仍然兼容，例如：</p><script type="math/tex; mode=display">vector+vector=vector\ (0+0=0)\\point+vector=point\ (1+0=1)</script><p>此外由于齐次坐标点的表达方式，还支持一种运算：</p><script type="math/tex; mode=display">point+point=point\ (1+1=2)</script><p>这种运算的本质是求两个相加点的中点，结合前文内容应该不难理解。</p><h3 id="Inverse-Transform——逆变换"><a href="#Inverse-Transform——逆变换" class="headerlink" title="Inverse Transform——逆变换"></a>Inverse Transform——逆变换</h3><p>逆变换，指的是将变换后的图像变回原图像的过程，如下图：</p><p><img src="6.png" alt=""></p><p>在矩阵形式下，假设原变换的变换矩阵为$M$，则其逆变换的变换矩阵为其逆矩阵$M^{-1}$。</p><p>值得一提的是，对于旋转变换矩阵：</p><script type="math/tex; mode=display">R_\theta=\begin{bmatrix}cos\theta & -sin\theta\\sin\theta & cos\theta\end{bmatrix}</script><p>由于$R_\theta$一个正交矩阵，所以有：</p><script type="math/tex; mode=display">R_{-\theta}=\begin{bmatrix}cos(-\theta) & -sin(-\theta)\\sin(-\theta) & cos(-\theta)\end{bmatrix}=\begin{bmatrix}cos\theta & sin\theta\\-sin\theta & cos\theta\end{bmatrix}=R_\theta^T=R_\theta^{-1}</script><h3 id="Composing-Transforms——复合变换"><a href="#Composing-Transforms——复合变换" class="headerlink" title="Composing Transforms——复合变换"></a>Composing Transforms——复合变换</h3><p>很多时候，我们对图像的变换会涉及多个基础变换，考虑下图所示的变换：</p><p><img src="7.png" width="60%"></p><p>这个变换的一种分解是先进行一个45°的旋转，再向右平移一个单位，即：</p><p><img src="8.png" width="60%"></p><p>使用矩阵来表达上述过程，就是：</p><script type="math/tex; mode=display">\begin{bmatrix}x'\\y'\\w'\end{bmatrix}=\begin{bmatrix}cos45° & -sin45° & 0\\sin45°& cos45° & 0\\0 & 0 & 1\end{bmatrix}\begin{bmatrix}1 & 0 & 1\\0 & 1 & 1\\0 & 0  & 1\end{bmatrix}\begin{bmatrix}x\\y\\w\end{bmatrix}</script><p>中间的两个矩阵刚好对应上述两步变换，应用顺序是从右往左。</p><p>这里之所以强调顺序，是因为如果我们交换两个步骤的顺序，也就是先平移再旋转，那产生的结果会完全不同：</p><p><img src="9.png" width="60%"></p><p>这对应的矩阵特性就是矩阵乘法不具有交换律，具体到本例子，就是：</p><script type="math/tex; mode=display">\begin{bmatrix}cos45° & -sin45° & 0\\sin45°& cos45° & 0\\0 & 0 & 1\end{bmatrix}\begin{bmatrix}1 & 0 & 1\\0 & 1 & 1\\0 & 0  & 1\end{bmatrix}\not=\begin{bmatrix}1 & 0 & 1\\0 & 1 & 1\\0 & 0  & 1\end{bmatrix}\begin{bmatrix}cos45° & -sin45° & 0\\sin45°& cos45° & 0\\0 & 0 & 1\end{bmatrix}</script><p>总结来说，假如我们现在有一系列变换$A_1,A_2,A_3,…$，那对应的矩阵表达就是：</p><script type="math/tex; mode=display">x^T =...·A_3·A_2·A_1·x</script><p>另外，由我们的变换一般式：</p><script type="math/tex; mode=display">\begin{bmatrix}x'\\y'\end{bmatrix}=\begin{bmatrix}a & b\\c & d\end{bmatrix}\begin{bmatrix}x\\y\end{bmatrix}+\begin{bmatrix}t_x\\t_y \end{bmatrix}\Rightarrow\begin{bmatrix}x'\\y'\\1\end{bmatrix}=\begin{bmatrix}a & b & t_x\\c & d & t_y\\0 & 0  & 1\end{bmatrix}\begin{bmatrix}x\\y\\1\end{bmatrix}</script><p>不难看出，<strong>使用齐次坐标表达变换时，线性变换总是先于平移变换进行</strong>。</p><h2 id="3D-Transformation"><a href="#3D-Transformation" class="headerlink" title="3D Transformation"></a>3D Transformation</h2><p>三维的变换可以看做是二维变换的推广，其一般式也与二维变换的类似：</p><script type="math/tex; mode=display">\begin{bmatrix}x'\\y'\\z'\\1\end{bmatrix}=\begin{bmatrix}a & b & c & t_x\\d & e & f & t_y\\g & h & i & t_z\\0 & 0 & 0  & 1\end{bmatrix}\begin{bmatrix}x\\y\\z\\1\end{bmatrix}</script><h3 id="简单三维变换"><a href="#简单三维变换" class="headerlink" title="简单三维变换"></a>简单三维变换</h3><p>三维下的缩放变换与平移变换仍比较简单，与二维的情况比较相似。</p><p>缩放变换的变换矩阵式为：</p><script type="math/tex; mode=display">S(s_x,s_y,s_z)=\begin{bmatrix}s_x & 0 & 0 & 0\\0 & s_y & 0 & 0\\0 & 0 & s_z & 0\\0 & 0 & 0  & 1\end{bmatrix}</script><p>平移变换的变换矩阵为：</p><script type="math/tex; mode=display">T(t_x,t_y,t_z)=\begin{bmatrix}1 & 0 & 0 & t_x\\0 & 1 & 0 & t_y\\0 & 0 & 1 & t_z\\0 & 0 & 0  & 1\end{bmatrix}</script><h3 id="旋转变换"><a href="#旋转变换" class="headerlink" title="旋转变换"></a>旋转变换</h3><p>在三维情形下，旋转变换变为了绕特定<strong>轴</strong>进行，如下是绕$x$轴进行旋转变换的情况：</p><p><img src="10.png" alt=""></p><p>（本系列按右手定则来进行描述，即右手竖起大拇指握拳，拇指指向正方向，其余四指的方向为旋转正方向）</p><p>据此，我们可以分别写出绕三个轴进行旋转变换的变换矩阵：</p><script type="math/tex; mode=display">R_x(\alpha)=\begin{pmatrix}1 & 0 & 0 & 0\\0 & cos\alpha & -sin\alpha & 0\\ 0 & sin\alpha & cos\alpha & 0\\ 0 & 0 &0 & 1\end{pmatrix}\\R_y(\alpha)=\begin{pmatrix}cos\alpha & 0 & sin\alpha & 0\\0 & 1 & 0 & 0\\ -sin\alpha & 0 & cos\alpha & 0\\ 0 & 0 &0 & 1\end{pmatrix}\\R_z(\alpha)=\begin{pmatrix}cos\alpha & -sin\alpha & 0 & 0\\sin\alpha & cos\alpha & 0 & 0\\ 0 & 0 & 1 & 0\\ 0 & 0 &0 & 1\end{pmatrix}</script><p>其中$R_x(\alpha)$和$R_z(\alpha)$都包含有子矩阵$\begin{pmatrix}cos\alpha &amp; -sin\alpha \ sin\alpha &amp; cos\alpha\end{pmatrix}$，只有$R_y(\alpha)$是相反的旋转角。</p><p>以$z$轴举例（$x$轴同理），设$x$，$y$，$z$三个坐标轴上正方向的单位向量分别为$\boldsymbol{i}$，$\boldsymbol{j}$，$\boldsymbol{k}$，我们有：</p><script type="math/tex; mode=display">i×j=k</script><p>也就是在右手定则下，绕$z$轴旋转的正方向会是先$x$后$y$，符合坐标顺序（也就是$xyz$顺序）。</p><p>反观$y$轴，由于：</p><script type="math/tex; mode=display">k×i=j</script><p>顺序为先$z$后$x$，而在坐标顺序中，$x$排在$z$前面，顺序是相反的，所以这里加上负号。</p><p>（其实这么解释有点笼统，如果把变换矩阵和坐标乘出来看会比较好理解一点，但闫老师就是这么讲的。）</p><h3 id="Euler-angles——欧拉角"><a href="#Euler-angles——欧拉角" class="headerlink" title="Euler angles——欧拉角"></a>Euler angles——欧拉角</h3><p>在三维空间中，旋转是一个非常复杂的问题，因为在平面中仅有两个方向（顺时针与逆时针），但在空间中旋转的方向可以是任意的。</p><p>不过刚才我们知道了，绕坐标轴旋转的变换矩阵是很容易得到的。因此我们可以思考：是否有办法将任意的旋转变换，用这三个基础的旋转来进行描述？</p><p>也就是按下述方式分解任意旋转：</p><script type="math/tex; mode=display">R=R_x(\alpha)R_y(\beta)R_z(\gamma)</script><p>答案是肯定的，这种方式就是所谓的<strong>欧拉角</strong>，旋转所绕轴为$Yaw$（偏航角），$Yaw$（俯仰角），$Roll$（滚动角）。</p><p><img src="11.png" alt=""></p><h3 id="Rodrigues’-Rotation-formula"><a href="#Rodrigues’-Rotation-formula" class="headerlink" title="Rodrigues’ Rotation formula"></a>Rodrigues’ Rotation formula</h3><p>罗德里格斯旋转公式（Rodrigues’ Rotation formula）描述了另外一种旋转变换，即<strong>“物体绕任意轴$\boldsymbol{n}$旋转角度$\boldsymbol{\alpha}$”</strong>的旋转变换。</p><p>在别的地方这种方式也可能被称为“轴角”，即通过一轴一角表示旋转，其具体表达式为：</p><script type="math/tex; mode=display">R(n,\alpha)=cos\alpha·\boldsymbol{I}+(1-cos\alpha)\boldsymbol{nn}^T+sin\alpha·\begin{pmatrix}0 & -n_z & n_y \\n_z & 0 & -n_x\\-n_y & n_x & 0\end{pmatrix}</script><p>其中$\boldsymbol{I}$为单位矩阵，该公式的证明以后有空单独开篇文章写（画饼），有兴趣的读者可以先自行查阅。</p><h2 id="MVP-Transformation"><a href="#MVP-Transformation" class="headerlink" title="MVP Transformation"></a>MVP Transformation</h2><p>现在假想一个场景，就是你正在拍摄一张风景照，那么从三维场景变成相机中的一张照片，这个过程中都发生了些什么呢？</p><p>我们可以认为是进行了这样的三步：</p><ol><li>找到一处漂亮的风景（<strong>model</strong> transformation）</li><li>找到相机的完美角度（<strong>view</strong> transformation）</li><li>按下快门（<strong>projection</strong> transformation）</li></ol><p>以上三步就是计算机图形学中的MVP变换，接下来要重点讲解这些内容。</p><p>在开始之前先在这里写下一个重要的思想，<strong>MVP变换的本质是坐标系的转换</strong>。</p><h3 id="Model-Transformation——模型变换"><a href="#Model-Transformation——模型变换" class="headerlink" title="Model Transformation——模型变换"></a>Model Transformation——模型变换</h3><p>模型变换效果是将<strong>局部坐标</strong>转换至<strong>世界坐标</strong>。</p><p>局部坐标系，有时也被叫做模型空间（Model Space），在游戏引擎或者建模软件中非常常见，一般每个模型都会有一个局部坐标系。</p><p><img src="16.png" alt=""></p><p>“头在脖子的上面”，这句话其实就是在用局部坐标系描述人的构成。</p><p>课程中没有提到这一部分，是因为在很多问题中，给出的信息都已经是在世界坐标系下的，但我认为学习计算机图形学，还是得写一下这部分的内容。</p><p>至于变换矩阵的部分，与视图变换的过程还是比较相似的，这里就不详细展开了。</p><h3 id="View-Transformation——视图变换"><a href="#View-Transformation——视图变换" class="headerlink" title="View Transformation——视图变换"></a>View Transformation——视图变换</h3><p>视图变换就是怎么放置相机的问题，其实质是将<strong>世界坐标</strong>转换至<strong>相机坐标</strong>。</p><h4 id="相机的表达与相机坐标系"><a href="#相机的表达与相机坐标系" class="headerlink" title="相机的表达与相机坐标系"></a>相机的表达与相机坐标系</h4><p>讨论怎么放置相机，就要先对相机进行定义，相机的定义需要三个信息：</p><p>位置$e$、朝向$\vec{g}$、上方向$\vec{t}$</p><p>（注意$\vec{t}$与$\vec{g}$都是单位向量，且相互垂直）</p><p><img src="12.png" width="40%"></p><p>这样定义相机的同时，其实也建立起了一个<strong>相机坐标系</strong>。考虑下面的两种情况：</p><p><img src="13.png" alt=""></p><p>由于物体和相机的<strong>相对位置完全一致</strong>，相机拍摄出的照片也是完全一致的。</p><p>这时如果我们使用相机坐标系，就可以将两种情况统一到一起，就像下图所示：</p><p><img src="14.png" alt=""></p><p>在本系列中，我们规定$e$为相机坐标系原点，$\vec{t}$为$y$轴正方向，$\vec{g}$为$z$轴负方向。</p><h4 id="世界坐标到相机坐标"><a href="#世界坐标到相机坐标" class="headerlink" title="世界坐标到相机坐标"></a>世界坐标到相机坐标</h4><p>那么现在问题在于，我们的物体坐标和相机的$e$，$\vec{g}$，$\vec{t}$信息，都是在空间坐标系下的表达，我们该如何将其转换为相机坐标系下的表达呢？</p><p><img src="15.png" alt=""></p><p>以上图为例，我们考虑如何将右上的坐标系变为左下的坐标系。</p><p>其实思路是很简单的，我们先将$e$移动到原点，然后依次将各坐标轴旋转到对应位置即可。</p><p>于是我们能将视图变换的变换矩阵$M_{view}$拆解为一个旋转矩阵和一个平移矩阵的乘积：</p><script type="math/tex; mode=display">M_{view}=R_{view}T_{view}</script><p>平移矩阵$T_{view}$是很容易写出来的，只需要利用$e$就可以得出：</p><script type="math/tex; mode=display">T_{view}=\begin{bmatrix}1 & 0 & 0 & -x_e\\0 & 1 & 0 & -y_e\\0 & 0 & 1 & -z_e\\0 & 0 & 0 & 1\\\end{bmatrix}</script><p>旋转矩阵$R<em>{view}$就比较复杂，现在我们的目标是将$\vec{g}$旋转到$z$轴负方向，$\vec{t}$旋转到$y$轴正方向，这其实是很难写的，但如果我们先求$R</em>{view}^{-1}$，那么就会变得容易一点。</p><p>那$R_{view}^{-1}$的目标，就是将$z$轴负方向旋转到$\vec{g}$，$y$轴正方向旋转到$\vec{t}$，我们可以使用取特殊点的方式来进行求解。</p><p>假设$xyz$坐标系下有一点$(0,1,0)$，那在旋转后的坐标系下，其坐标应为$(x_t,y_t,z_t)$，也就是$\vec{t}$的三维</p><p>（这里就是先前将$\vec{t}$取为单位向量的好处）</p><p>那我们再设：</p><script type="math/tex; mode=display">R_{view}^{-1}=\begin{bmatrix}a & b & c & 0\\d & e & f & 0\\g & h & i & 0\\0 & 0 & 0  & 1\end{bmatrix}</script><p>应该有：</p><script type="math/tex; mode=display">\begin{bmatrix}x_t\\y_t\\z_t\\1\end{bmatrix}=\begin{bmatrix}a & b & c & 0\\d & e & f & 0\\g & h & i & 0\\0 & 0 & 0  & 1\end{bmatrix}\begin{bmatrix}0\\1\\0\\1\end{bmatrix}</script><p>不难得到$b=x_t$，$e=y_t$，$h=z_t$。</p><p>按照这一解法，我么最终可以得到：</p><script type="math/tex; mode=display">R_{view}^{-1}=\begin{bmatrix}x_{g×t} & x_t & x_{-g} & 0\\y_{g×t} & y_t & y_{-g} & 0\\x_{g×t} & z_t & z_{-g} & 0\\0 & 0 & 0  & 1\end{bmatrix}</script><p>最巧妙的一步就在这里，我们能够发现，$R_{view}^{-1}$是一个<strong>正交矩阵</strong>，所以我们得到：</p><script type="math/tex; mode=display">R_{view}={(R_{view}^{-1})}^T=\begin{bmatrix}x_{g×t} & y_{g×t} & z_{g×t} & 0\\x_t & y_t & z_t & 0\\x_{-g} & y_{-g} & z_{-g} & 0\\0 & 0 & 0  & 1\end{bmatrix}</script><p>至此，我们就得到了整个视图变换的变换矩阵。</p><h3 id="Projection-Transformation——投影变换"><a href="#Projection-Transformation——投影变换" class="headerlink" title="Projection Transformation——投影变换"></a>Projection Transformation——投影变换</h3><p>最后一步投影变换变换是进行“照相”，将三维变为二维，也就是<strong>相机坐标</strong>到<strong>屏幕坐标</strong>的转换。</p><p>常见的投影变换有两种，一种是<strong>透视投影</strong>，另一种是<strong>正交投影</strong>。</p><p><img src="17.png" alt=""></p><p>（相信学过美术和设计的同学一定不陌生）</p><h4 id="Orthographic-Projection——正交投影"><a href="#Orthographic-Projection——正交投影" class="headerlink" title="Orthographic Projection——正交投影"></a>Orthographic Projection——正交投影</h4><p>正交投影是最简单的一种投影，它所做的就是直接将物体沿坐标轴投射到平面上。</p><p><img src="18.png" width="60%"></p><p>最简单的做法，就是直接丢掉所有点的$z$坐标，再将其平移缩放至矩形$[-1 ， 1]^2$中。</p><p>（平移缩放的目的是为了方便后续的计算，也是一种约定俗成的做法）</p><p>不过在图形学中，我们通常采用的是另外一种方法。</p><p>首先我们提出一种表达空间长方体的新办法，那就是用$[l,r]×[b,t]×[f,n]$的形式，三个二元组分别表示该长方体在三个坐标轴上所占据的区间，如下图左：</p><p>（其实就是left，right，bottom，top，far和near的首字母）</p><p><img src="19.png" alt=""></p><p>然后我们考虑将该长方体变换到$[-1,1]^3$的标准立方体，图中已经很清楚地展示了这一过程，即先将其平移到原点，再进行缩放即可，该过程的变换矩阵非常容易写出，即：</p><script type="math/tex; mode=display">M_{ortho}=\begin{bmatrix}\frac{2}{r-l} & 0 & 0 & 0 \\0 & \frac{2}{t-b} & 0 & 0 \\0 & 0 & \frac{2}{n-f} &0 \\0 & 0 & 0 & 1 \end{bmatrix}\begin{bmatrix}1 & 0 & 0 & -\frac{r+l}{2}\\0 & 1 & 0 & -\frac{t+b}{2}\\0 & 0 & 1 & -\frac{n+f}{2}\\ 0 & 0 & 0 & 1\end{bmatrix}</script><h4 id="Prespective-Projection——透视投影"><a href="#Prespective-Projection——透视投影" class="headerlink" title="Prespective Projection——透视投影"></a>Prespective Projection——透视投影</h4><p>透视投影是一种更加符合人类视角的投影方式，拥有“近大远小”的特点。</p><p><img src="20.png" alt=""></p><p>在欧式几何中，有一条真理为“平行线永不相交”，但是在投影变换后，原先的两条平行线也会交于一点，就像下图中的两条铁轨</p><p><img src="21.png" width="50%"></p><p>那么我们该如何来做这样的透视投影呢？</p><p>我们首先思考投影变换与正交变换的区别在哪里，在下图中</p><p><img src="/22.png" alt=""></p><p>右边的长方体代表的是正交变换，而在投影变换中，我们是对一个截锥体进行操作。</p><p>在上一部分中，我们已经得到了正交变换的变换矩阵，那现在我们只需要将这个截锥体“挤压”成长方体，就可以直接沿用这一结论了。</p><p>接下来我们详细解释这一过程。先从截锥体的侧面图来看：</p><p><img src="23.png" alt=""></p><p>注意这里的$(x,y,z)$代表的是任意点，$n$代表的近平面的$z$坐标，$(x’,y’,z’)$表示的<strong>不是挤压后的点坐标，而是挤压后的点在近平面上正交投影的点</strong>。</p><p>原课程中似乎是直接将$(x’,y’,z’)$解释为挤压后的点坐标，但事实上，该点应该差不多在蓝点位置：</p><p><img src="24.png" alt=""></p><p>我们将变换后的点坐标记为$(x’’,y’’,z’’)$，由于从$(x’’,y’’,z’’)$到$(x’,y’,z’)$是正交变换，所以有$y’’=y’$。</p><p>利用相似三角形的知识，我们可以得到$y’’=y’=\frac{n}{z}y$，同理有$x’’=\frac{n}{z}x$。</p><p>但$z$轴坐标就不同了，我们第一反应是$z$坐标是不变的，但其实在这种挤压下，$z$坐标是<strong>会发生改变的</strong>。</p><p>（当然，远近两个平面上的点$z$坐标确实不会变）</p><p>根本原因在于我们想用矩阵来表达这种挤压，那其实就默认这种挤压是线性变换。</p><p>如果$z$坐标不变，它就不是一个线性变换，也就无法用矩阵写出了。</p><p>根据我们现在已知的信息，有：</p><script type="math/tex; mode=display">\begin{pmatrix}x''\\y''\\z''\\1\end{pmatrix}=\begin{pmatrix}\frac{n}{z}x\\\frac{n}{z}y\\unknown\\1\end{pmatrix}==\begin{pmatrix}nx\\ny\\unknown\\z\end{pmatrix}</script><p>那我们要求的挤压矩阵$M_{persp\rightarrow{ortho}}$应满足：</p><script type="math/tex; mode=display">M_{persp\rightarrow{ortho}}\begin{pmatrix}x\\y\\z\\1\end{pmatrix}=\begin{pmatrix}nx\\ny\\unknown\\z\end{pmatrix}\tag{1}</script><p>不难解得$M_{persp\rightarrow{ortho}}$的一部分参数为：</p><script type="math/tex; mode=display">M_{persp\rightarrow{ortho}}=\begin{bmatrix}n & 0 & 0 & 0 \\0 & n & 0 & 0 \\a & b & c & d \\0 & 0 & 0 & 1 \end{bmatrix}</script><p>其中$a$，$b$，$c$，$d$仍是未知数。</p><p>刚才我们提到过，远近平面上的点，其$z$坐标不会改变，那我们可以取远近平面上的点来进一步求解。</p><p>取近平面上任意一点$(x,y,n)$，该点变换后的坐标应仍是$(x,y,n)$，即为：</p><script type="math/tex; mode=display">\begin{pmatrix}x''\\y''\\z''\\1\end{pmatrix}=\begin{pmatrix}x\\y\\n\\1\end{pmatrix}==\begin{pmatrix}nx\\ny\\n^2\\n\end{pmatrix}</script><p>由公式(1)，有：</p><script type="math/tex; mode=display">\begin{bmatrix}n & 0 & 0 & 0 \\0 & n & 0 & 0 \\a & b & c & d \\0 & 0 & 0 & 1 \end{bmatrix}\begin{pmatrix}x\\y\\n\\1\end{pmatrix}=\begin{pmatrix}nx\\ny\\n^2\\n\end{pmatrix}</script><p>即对任意的$(x,y,n)$，有：</p><script type="math/tex; mode=display">ax+by+cn+d=n^2</script><p>可得$a=0$，$b=0$，所以该式可以简化为：</p><script type="math/tex; mode=display">cn+d=n^2\tag{2}</script><p>我们再取远平面上一点$(0,0,f,1)$，这是远平面上的中心点，所以变换有的坐标不变，即：</p><script type="math/tex; mode=display">\begin{pmatrix}x''\\y''\\z''\\1\end{pmatrix}=\begin{pmatrix}0\\0\\f\\1\end{pmatrix}==\begin{pmatrix}0\\0\\f^2\\f\end{pmatrix}</script><p>同上述步骤，我们代入(1)式，最终可得：</p><script type="math/tex; mode=display">cf+d=f^2\tag{3}</script><p>联立（2）（3）两式，我们最终解得：</p><script type="math/tex; mode=display">c=n+f\\d=-nf</script><p>至此，我们完成了$M_{persp\rightarrow{ortho}}$的求解，该矩阵的完整形式为：</p><script type="math/tex; mode=display">M_{persp\rightarrow{ortho}}=\begin{bmatrix}n & 0 & 0 & 0 \\0 & n & 0 & 0 \\0 & 0 & n+f & -nf \\0 & 0 & 0 & 1 \end{bmatrix}</script><p>将其与正交投影的变换矩阵相乘，就得到了投影变换的变换矩阵$M_{persp}$：</p><script type="math/tex; mode=display">M_{persp}=M_{ortho}M_{persp\rightarrow{ortho}}</script><h4 id="一些常见概念"><a href="#一些常见概念" class="headerlink" title="一些常见概念"></a>一些常见概念</h4><p>在很多时候我们会提到<strong>视场</strong>（Field-of-View，即FOV）以及<strong>纵横比</strong>（Aspect Ratio）这两个概念，在这里可以做出解释。</p><p>之前提到过，我们可以用$[l,r]×[b,t]×[f,n]$的方式来表示三维空间中的长方体，于是我们定义：</p><p><img src="26.png" alt=""></p><script type="math/tex; mode=display">tan\frac{fovY}{y}=\frac{t}{|n|}\\aspect=\frac{r}{t}</script><p>其中$fovY$表示$y$方向上的视场，$x$方向同理。</p><p>到这里，有关变换的部分就告一段落了，下篇笔记见！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机图形学 </tag>
            
            <tag> GANES101 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
